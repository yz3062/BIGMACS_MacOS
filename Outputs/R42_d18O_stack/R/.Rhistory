demo()
demo(graphics)
View(opar)
demo(graphics)
View(opar)
View(x)
x
x <- rnorm(50)
View(x)
x
data("iris")
force(iris)
View(iris)
View(opar)
View(opar)
View(opar)
x <- stats::rnorm(50)
opar <- par(bg = "white")
plot(x, ann = FALSE, type = "n")
x
plot(1:10, main="My Graph", xlab="The x-axis", ylab="The y axis")
install.packages("learnr")
.packages(all = TRUE)
install_github("plannapus/NSBcompanion")
install.packages("NSBcompanion_2.2.tar.gz",repos=NULL,type="source")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("astrochron")
library(astrochron)
plotmath
recursion
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("remotes")
library(remotes)
remotes::install_github("nickmckay/lipdR")
library(lipdR)
L <- readlipd()
L <- readLipd()
ts <- extractTs(L)
# allExcel <- map(ax,readPdvExcel)
#
# #create LiPD
# L <- pdv2lipd(allExcel[[1]])
ax
ax <- list.files(stackFilePath,pattern = "txt",full.names = TRUE)
# #load in all the sheets
# allExcel <- map(ax,readPdvExcel)
#
# #create LiPD
# L <- pdv2lipd(allExcel[[1]])
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
ax
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
stackFilePath
a <- 1
list.files("./../Merged/")
list.files(".")
list.files("~")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
stackFilePath
a <- 'abc'
a <- "abc"
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
ax
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convertt.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
ax
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
rlang::last_trace()
ax[1]
f <- read.table(ax[1])
help(grepl)
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
es
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
es
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
allSheets
allSheets[[1]]['Site Name']
allSheets[[1]]
allSheets[[2]]
allSheets[[2]]['Site Name']
match('ODP665.txt', core_info[[2]]['File Name'])
match('ODP665.txt', allSheets[[2]]['File Name'])
allSheets[[2]]['File Name']
match('502_LR04age_1.txt', allSheets[[2]]['File Name'])
allSheets[[2]]['File Name']
which(allSheets[[2]]['File Name'] == '502_LR04age_1.txt')
which(allSheets[[2]]['File Name'] == '552_LR04age.txt')
which(allSheets[[2]]['File Name'] == 'abc')
allSheets[[2]]['File Name'][[2]]
allSheets[[2]]['File Name']$2
allSheets[[2]]['File Name']
allSheets[[2, 2]]
allSheets[[2]][[2]]
allSheets[[2]]['File Name'][[2]]
allSheets[[2]]['File Name'][[2]
allSheets[[2]]['File Name'][2]
allSheets[[2]]['File Name'][,2]
allSheets[[2]]['File Name'][2,]
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
allSheets[[2]]['File Name']
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
favorite_desserts <- list(Sophia = "banana bread", Eliott = "pancakes", Karina = "chocolate cake")
favorite_desserts |> map_chr(\(food) paste(food, "rocks!"))
favorite_desserts <- list(Sophia = "banana bread", Eliott = "pancakes", Karina = "chocolate cake")
favorite_desserts
favorite_desserts <- list(Sophia = "banana bread", Eliott = "pancakes", Karina = "chocolate cake")
favorite_desserts |> map_chr(\(food), paste(food, "rocks!"))
names(favorite_desserts)
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
txt_content
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
c(1,3)
an <- map_chr(mt,"variableName")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
View(L)
View(L)
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
validLipd(L)
#make up a datasetId
L$datasetId <- paste0("BIGMACS",str_remove_all(L$dataSetName,pattern = "[^A-Za-z0-9]"))
L$datasetId
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
# mass convert to lipd
D <- vector(mode = "list",length = length(txt_list))
for(i in 1:length(txt_list)){
L = txt2lipd(txt_list[i], allSheets)
L <- lipdR:::new_lipd(L)
D[[i]] <- L
}
validLipd(L)
L$datasetId
L$chronData
L$chronData[[1]]$measurementTable[[1]]
txt_content = read.table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE)
txt_content
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
L = txt2lipd(txt_list[i], allSheets)
mt <- vector(mode = "list",length = length(txt_content))
for(m in c(1,2,3)){
mt[[m]] <- makeColumn(txt_content[[m]])
mt[[m]]$number <- m
}
View(txt_content)
txt_content = read.table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE)
txt_content
txt_content[[1]]
names(txt_content[[1]])
txt_content[,1]
txt_content$Depth
txt_content = readr::read_table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE)
txt_content = as_tibble(read.table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE))
txt_content[[1]]
makeColumn <- function(col){
longName <- names(col)
values = col
out <- list(values = values,
TSid = createTSid("pdv2l"))
return(out)
}
makeColumn(txt_content[[m]])
variableNames <- c("depth","age","d18O")
units <- c("mcd","ka","permil")
for(m in c(1,2,3)){
mt[[m]] <- makeColumn(txt_content[[m]])
mt[[m]]$number <- m
mt[[m]]$variableName <- variableNames[m]
mt[[m]]$units <- units[m]
}
mt
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
L$paleoData
names(mt) <- variableNames
core_info[[sheet_index_core]]['File Name'][row_index_core,]
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
L = txt2lipd(txt_list[i], allSheets)
L$dataSetName <- core_info[[sheet_index_core]]['File Name'][row_index_core,]
L$dataSetName
core_info
sheet_index_core
row_index_core
row_index = which(allSheets[[i]]['File Name'] == file_name)
is.null(row_index)
!is.null(row_index)
row_index
length(row_index) > 0
# find core info for the core
for (i in 2:4){
row_index = which(allSheets[[i]]['File Name'] == file_name)
if (length(row_index) > 0){
sheet_index_core = i
row_index_core = row_index
break
}
}
L$dataSetName <- core_info[[sheet_index_core]]['File Name'][row_index_core,]
L$dataSetName
core_info[[sheet_index_core]]['File Name'][row_index_core,][[1]]
core_info[[sheet_index_core]]['Latitude'][row_index_core,] %>%
as.numeric()
core_info[[sheet_index_core]]['Water Depth'][row_index_core,] %>%
as.numeric() * -1
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
L = txt2lipd(txt_list[i], allSheets)
i
i <- 150
L = txt2lipd(txt_list[i], allSheets)
L
validLipd(L)
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
L = txt2lipd(txt_list[i], allSheets)
validLipd(L)
L$pub[[1]]
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
library(astrochron)
getLaskar(sol="la04",verbose=T)
library(astrochron)
source("~/.active-rstudio-document")
View(sedrates)
View(res)
res[[1]]
View(res[[1]])
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# evaluate precession & eccentricity power, and precession modulations
res=timeOpt(ex,fit=1,output=1)
source("~/.active-rstudio-document")
View(ex)
source("~/.active-rstudio-document")
library(astrochron)
source("~/.active-rstudio-document")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt.R")
setwd("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt.R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt.R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt.R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_for_Steve.R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_for_Steve.R")
packageVersion(astrochron)
packageVersion("astrochron")
detach("package:astrochron", unload = TRUE)
library(astrochron)
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
install.packages(c("askpass", "astrochron", "bslib", "cli", "cluster", "cpp11", "curl", "data.table", "DBI", "dbplyr", "desc", "digest", "dotCall64", "dplyr", "evaluate", "fansi", "fields", "fontawesome", "foreign", "fs", "gargle", "ggplot2", "glue", "gtable", "haven", "htmltools", "httr", "IDPmisc", "jsonlite", "KernSmooth", "knitr", "labeling", "lattice", "lifecycle", "lubridate", "maps", "MASS", "Matrix", "mgcv", "multitaper", "nlme", "openssl", "pkgbuild", "prettyunits", "processx", "progress", "ps", "purrr", "ragg", "readr", "readxl", "rematch", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rprojroot", "rstudioapi", "rvest", "sass", "scales", "sets", "spam", "spatial", "stringi", "stringr", "survival", "systemfonts", "textshaping", "tidyr", "timechange", "tinytex", "utf8", "uuid", "vctrs", "viridis", "vroom", "withr", "xfun", "xml2", "yaml"))
packegeVersion(astrochron)
packegeVersion("astrochron")
packageVersion("astrochron")
eha(dat,win=500,fmax=0.1,ydir=-1,genplot=4,pl=2,ylab="Age (ka)",xlab="Frequency (cycles/ka)")
# load the astrochron package, please use version 1.2
library(astrochron)
library(readxl)
ex <- read_excel('Stack_untuned_uniform_age_exclusion_expanded_1172_removed_Hobart2023.xlsx')
eha(dat,win=500,fmax=0.1,ydir=-1,genplot=4,pl=2,ylab="Age (ka)",xlab="Frequency (cycles/ka)")
eha(ex,win=500,fmax=0.1,ydir=-1,genplot=4,pl=2,ylab="Age (ka)",xlab="Frequency (cycles/ka)")
#  the astronomical target comes from Laskar et al. (2004)
# targetP contains the dominant obliquity term.
targetP=c(41.08463)
# targetE contains the amplitude modulation terms for obliquity.
targetE=c(174.8252,106.6098,97.08738)
#  we will use a 400 ka window.
res=eTimeOpt(dat,targetP=targetP,targetE=targetE,sedmin=80,sedmax=120,win=400,fitModPwr=F,flow=1/70,fhigh=1/25, roll=10^9, output=1,ydir=-1)
#  we will use a 400 ka window.
res=eTimeOpt(ex,targetP=targetP,targetE=targetE,sedmin=80,sedmax=120,win=400,fitModPwr=F,flow=1/70,fhigh=1/25, roll=10^9, output=1,ydir=-1)
# extract the optimal sedimentation rates from the eTimeOpt results
#  we will focus on the spectral power fit (middle panel in above figure),
#  which appears most reliable in this specific application.
sedrates=eTimeOptTrack(res[2])
# integrate the sedimentation rate history to create a depth-time map.
control=sedrate2time(sedrates)
# use the eTimeOpt depth-time map to 'tune' the oxygen isotope data.
#  note that we are extrapolating the sedimentation rate for the
#  lowermost and uppermost 200 ka of the data set.
dat2=tune(dat,control=control,extrapolate=T)
# use the eTimeOpt depth-time map to 'tune' the oxygen isotope data.
#  note that we are extrapolating the sedimentation rate for the
#  lowermost and uppermost 200 ka of the data set.
dat2=tune(ex,control=control,extrapolate=T)
# interpolate to even sampling grid (use median sampling interval)
dat2_lin=linterp(dat2)
# conduct a new eha analysis on the tuned record
eha(dat2_lin,win=500,fmax=0.1,ydir=-1,genplot=4,pl=2,ylab="Age (ka)",xlab="Frequency (cycles/ka)")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_for_Steve.R")
