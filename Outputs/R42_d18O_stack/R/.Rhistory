demo()
demo(graphics)
View(opar)
demo(graphics)
View(opar)
View(x)
x
x <- rnorm(50)
View(x)
x
data("iris")
force(iris)
View(iris)
View(opar)
View(opar)
View(opar)
x <- stats::rnorm(50)
opar <- par(bg = "white")
plot(x, ann = FALSE, type = "n")
x
plot(1:10, main="My Graph", xlab="The x-axis", ylab="The y axis")
install.packages("learnr")
.packages(all = TRUE)
install_github("plannapus/NSBcompanion")
install.packages("NSBcompanion_2.2.tar.gz",repos=NULL,type="source")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("astrochron")
library(astrochron)
plotmath
recursion
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
install.packages("remotes")
library(remotes)
remotes::install_github("nickmckay/lipdR")
library(lipdR)
L <- readlipd()
L <- readLipd()
ts <- extractTs(L)
# allExcel <- map(ax,readPdvExcel)
#
# #create LiPD
# L <- pdv2lipd(allExcel[[1]])
ax
ax <- list.files(stackFilePath,pattern = "txt",full.names = TRUE)
# #load in all the sheets
# allExcel <- map(ax,readPdvExcel)
#
# #create LiPD
# L <- pdv2lipd(allExcel[[1]])
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
ax
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
stackFilePath
a <- 1
list.files("./../Merged/")
list.files(".")
list.files("~")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
stackFilePath
a <- 'abc'
a <- "abc"
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
ax
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convertt.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
ax
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
rlang::last_trace()
ax[1]
f <- read.table(ax[1])
help(grepl)
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
es
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
es
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
allSheets
allSheets[[1]]['Site Name']
allSheets[[1]]
allSheets[[2]]
allSheets[[2]]['Site Name']
match('ODP665.txt', core_info[[2]]['File Name'])
match('ODP665.txt', allSheets[[2]]['File Name'])
allSheets[[2]]['File Name']
match('502_LR04age_1.txt', allSheets[[2]]['File Name'])
allSheets[[2]]['File Name']
which(allSheets[[2]]['File Name'] == '502_LR04age_1.txt')
which(allSheets[[2]]['File Name'] == '552_LR04age.txt')
which(allSheets[[2]]['File Name'] == 'abc')
allSheets[[2]]['File Name'][[2]]
allSheets[[2]]['File Name']$2
allSheets[[2]]['File Name']
allSheets[[2, 2]]
allSheets[[2]][[2]]
allSheets[[2]]['File Name'][[2]]
allSheets[[2]]['File Name'][[2]
allSheets[[2]]['File Name'][2]
allSheets[[2]]['File Name'][,2]
allSheets[[2]]['File Name'][2,]
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
allSheets[[2]]['File Name']
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
favorite_desserts <- list(Sophia = "banana bread", Eliott = "pancakes", Karina = "chocolate cake")
favorite_desserts |> map_chr(\(food) paste(food, "rocks!"))
favorite_desserts <- list(Sophia = "banana bread", Eliott = "pancakes", Karina = "chocolate cake")
favorite_desserts
favorite_desserts <- list(Sophia = "banana bread", Eliott = "pancakes", Karina = "chocolate cake")
favorite_desserts |> map_chr(\(food), paste(food, "rocks!"))
names(favorite_desserts)
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
txt_content
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
c(1,3)
an <- map_chr(mt,"variableName")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
View(L)
View(L)
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
validLipd(L)
#make up a datasetId
L$datasetId <- paste0("BIGMACS",str_remove_all(L$dataSetName,pattern = "[^A-Za-z0-9]"))
L$datasetId
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
# mass convert to lipd
D <- vector(mode = "list",length = length(txt_list))
for(i in 1:length(txt_list)){
L = txt2lipd(txt_list[i], allSheets)
L <- lipdR:::new_lipd(L)
D[[i]] <- L
}
validLipd(L)
L$datasetId
L$chronData
L$chronData[[1]]$measurementTable[[1]]
txt_content = read.table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE)
txt_content
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
L = txt2lipd(txt_list[i], allSheets)
mt <- vector(mode = "list",length = length(txt_content))
for(m in c(1,2,3)){
mt[[m]] <- makeColumn(txt_content[[m]])
mt[[m]]$number <- m
}
View(txt_content)
txt_content = read.table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE)
txt_content
txt_content[[1]]
names(txt_content[[1]])
txt_content[,1]
txt_content$Depth
txt_content = readr::read_table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE)
txt_content = as_tibble(read.table(txt, col.names = c('Depth', 'Age', 'd18O'), fill=TRUE))
txt_content[[1]]
makeColumn <- function(col){
longName <- names(col)
values = col
out <- list(values = values,
TSid = createTSid("pdv2l"))
return(out)
}
makeColumn(txt_content[[m]])
variableNames <- c("depth","age","d18O")
units <- c("mcd","ka","permil")
for(m in c(1,2,3)){
mt[[m]] <- makeColumn(txt_content[[m]])
mt[[m]]$number <- m
mt[[m]]$variableName <- variableNames[m]
mt[[m]]$units <- units[m]
}
mt
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
L$paleoData
names(mt) <- variableNames
core_info[[sheet_index_core]]['File Name'][row_index_core,]
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
L = txt2lipd(txt_list[i], allSheets)
L$dataSetName <- core_info[[sheet_index_core]]['File Name'][row_index_core,]
L$dataSetName
core_info
sheet_index_core
row_index_core
row_index = which(allSheets[[i]]['File Name'] == file_name)
is.null(row_index)
!is.null(row_index)
row_index
length(row_index) > 0
# find core info for the core
for (i in 2:4){
row_index = which(allSheets[[i]]['File Name'] == file_name)
if (length(row_index) > 0){
sheet_index_core = i
row_index_core = row_index
break
}
}
L$dataSetName <- core_info[[sheet_index_core]]['File Name'][row_index_core,]
L$dataSetName
core_info[[sheet_index_core]]['File Name'][row_index_core,][[1]]
core_info[[sheet_index_core]]['Latitude'][row_index_core,] %>%
as.numeric()
core_info[[sheet_index_core]]['Water Depth'][row_index_core,] %>%
as.numeric() * -1
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
L = txt2lipd(txt_list[i], allSheets)
i
i <- 150
L = txt2lipd(txt_list[i], allSheets)
L
validLipd(L)
debugSource("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
L = txt2lipd(txt_list[i], allSheets)
validLipd(L)
L$pub[[1]]
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/convert.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
source("~/Documents/Work/Lorraine/Stacking/Stack/R/workflow.R")
library(astrochron)
getLaskar(sol="la04",verbose=T)
library(astrochron)
source("~/.active-rstudio-document")
View(sedrates)
View(res)
res[[1]]
View(res[[1]])
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# evaluate precession & eccentricity power, and precession modulations
res=timeOpt(ex,fit=1,output=1)
source("~/.active-rstudio-document")
View(ex)
source("~/.active-rstudio-document")
library(astrochron)
source("~/.active-rstudio-document")
dat3_lin
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve.R")
setwd("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve.R")
dat3
res
control
sedrates
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve_part2.R")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve_part2.R")
View(time)
save(time, file = "tTimeOpt_from_Steve_part2_1000runs_time.RData")
save(sr, file = "tTimeOpt_from_Steve_part2_1000runs_sr.RData")
load("tTimeOpt_from_Steve_part2_1000runs_time.RData")
depth
save(depth, file = "tTimeOpt_from_Steve_part2_1000runs_depth.RData")
sedrates
View(time)
a = cbind(control,sedrates[,2])
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve_part2.R")
library(doFuture)
install.packages("doFuture")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve_part2_parellel.R")
# from sim list to time, sr, and depth ####
for(i in 1:nsim)
{
time[,i]=sim[,2]
sr[,i]=sim[,3]
}
# from sim list to time, sr, and depth ####
for(i in 1:nsim)
{
time[,i]=sim[i][,2]
sr[,i]=sim[i][,3]
}
sim[1]
sim[1][,2]
View(sr)
lapply(sim, "[[", 2)
time = lapply(sim, "[[", 2)
sr = lapply(sim, "[[", 3)
# from sim list to time, sr, and depth ####
time <- lapply(sim, "[[", 2)
sim[1,2]
sim[1][]
sim[1][1]
sim[1][][,2]
sim[1][2]
sim[1][,1]
sim[1][1,1]
sim[1,,2]
a = sim[1]
sim[[1]]
a = sim[[1]]
sim[[1]][,2]
# from sim list to time, sr, and depth ####
for(i in 1:nsim)
{
time[,i]=sim[[i]][,2]
sr[,i]=sim[[i]][,3]
}
sim[[1]][, 2]
time[,1]
# set up matrices for Monte Carlo results
depth<-double(nwin)
time<-double(nwin*nsim)
dim(time)<-c(nwin,nsim)
sr<-double(nwin*nsim)
dim(sr)<-c(nwin,nsim)
for(i in 1:nsim)
{
time[,i]=sim[[i]][,2]
sr[,i]=sim[[i]][,3]
}
depth=sim[[1]][,1]
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve_part2_parellel.R")
# the script below is for postprocessing and plotting results
# calculate standard deviation of age and sedimentation rate by row (window)
tsd=apply(time,1,sd)
srsd=apply(sr,1,sd)
# plot 2*standard deviation sedrate uncertainty by window
plot(2*srsd,type="l",lwd=2, col="red",xlab="Window Number",ylab="+/- 2 sigma uncertainty (correction factor)")
# calculate mean age and sedimentation rate by row (window)
tave=apply(time,1,mean)
srave= apply(sr,1,mean)
# plot 2*standard deviation timescale uncertainty by window
plot(2*tsd,type="l",lwd=2, col="red",xlab="Window Number",ylab="+/- 2 sigma uncertainty (ka)")
# plot depth derived times scale versus mean and 2*standard deviation of eTimeOpt-derived timescale
plot(tave,depth,type="l",lwd=2,ylim=c(2570,200),xlab="eTimeOpt-derived Timescale (ka)",ylab="Depth-derived Timescale (ka)")
lines(tave+2*tsd,depth,type="l",lwd=1,col="red")
lines(tave-2*tsd,depth,type="l",lwd=1,col="red")
# to add: plot all individual timescales from the Monte Carlo simulations
source("~/Documents/GitHub/BIGMACS_MacOS/Outputs/R42_d18O_stack/R/eTimeOpt_from_Steve_part2_parellel.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
load('tTimeOpt_from_Steve_part2_1000runs_depth.RData')
load('tTimeOpt_from_Steve_part2_1000runs_time.RData')
tsd=apply(time,1,sd)
# save depth and tsd
output = cbind(depth, tsd)
output_df = as.data.frame(output)
# save diff to excel
library(writexl)
write_xlsx(output_df, './untuned_intermediate_tuned_ages_uncertainty.xlsx')
